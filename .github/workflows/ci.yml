name: ParkEase CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create test environment file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env.test
        echo "MONGODB_TEST_URI=mongodb://localhost:27017/parkease_test" >> .env.test
        echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env.test
        echo "JWT_EXPIRE=7d" >> .env.test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || true

    - name: Run backend unit tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_TEST_URI: mongodb://localhost:27017/parkease_test
        JWT_SECRET: test_jwt_secret_key_for_ci

    - name: Generate test coverage report
      working-directory: ./backend
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'
        channel: 'stable'

    - name: Get Flutter dependencies
      working-directory: ./frontend
      run: flutter pub get

    - name: Analyze Flutter code
      working-directory: ./frontend
      run: flutter analyze

    - name: Run Flutter unit tests
      working-directory: ./frontend
      run: flutter test --coverage

    - name: Upload Flutter coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Start backend server
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env
        echo "MONGODB_URI=mongodb://localhost:27017/parkease_test" >> .env
        echo "JWT_SECRET=test_jwt_secret_key_for_ci" >> .env
        echo "PORT=3000" >> .env
        npm start &
        sleep 10

    - name: Install Newman (Postman CLI)
      run: npm install -g newman

    - name: Run Postman API tests
      run: |
        newman run docs/postman/ParkEase_API_Tests.postman_collection.json \
          --environment docs/postman/test-environment.json \
          --reporters cli,json \
          --reporter-json-export api-test-results.json

    - name: Upload API test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-test-results
        path: api-test-results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, api-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'

    - name: Build backend
      working-directory: ./backend
      run: |
        npm ci --production
        npm run build || echo "No build script defined"

    - name: Build Flutter app
      working-directory: ./frontend
      run: |
        flutter pub get
        flutter build apk --release
        flutter build web --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/app/outputs/flutter-apk/app-release.apk
          frontend/build/web/

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, api-tests]
    if: always()

    steps:
    - name: Notify success
      if: needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.api-tests.result == 'success'
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.api-tests.result == 'failure'
      run: |
        echo "❌ Some tests failed:"
        echo "Backend: ${{ needs.backend-tests.result }}"
        echo "Frontend: ${{ needs.frontend-tests.result }}"
        echo "API Tests: ${{ needs.api-tests.result }}"-results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, api-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'

    - name: Build backend
      run: |
        cd backend
        npm ci --production

    - name: Build Flutter app
      run: |
        cd frontend
        flutter pub get
        flutter build apk --release
        flutter build web --release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          frontend/build/app/outputs/flutter-apk/app-release.apk
          frontend/build/web/

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, api-tests]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.api-tests.result == 'success' }}
      run: echo "✅ All tests passed successfully!"

    - name: Notify failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.api-tests.result == 'failure' }}
      run: echo "❌ Some tests failed. Please check the logs."