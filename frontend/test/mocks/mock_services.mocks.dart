// Mocks generated by Mockito 5.4.5 from annotations
// in parkease/test/mocks/mock_services.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i15;
import 'package:geolocator/geolocator.dart' as _i7;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:parkease/core/models/booking_model.dart' as _i13;
import 'package:parkease/core/models/parking_model.dart' as _i12;
import 'package:parkease/core/models/user_model.dart' as _i5;
import 'package:parkease/core/services/api_service.dart' as _i2;
import 'package:parkease/core/services/auth_service.dart' as _i4;
import 'package:parkease/core/services/location_service.dart' as _i6;
import 'package:parkease/core/services/navigation_service.dart' as _i14;
import 'package:parkease/core/services/storage_service.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {#queryParameters: queryParameters},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> post(
    String? path, {
    dynamic data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {#data: data},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> put(
    String? path, {
    dynamic data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {#data: data},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<dynamic> delete(String? path) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Future<Map<String, dynamic>> getUserStats() => (super.noSuchMethod(
        Invocation.method(
          #getUserStats,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i4.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Map<String, dynamic>> register({
    required String? name,
    required String? email,
    required String? password,
    required String? phone,
    required _i5.VehicleInfo? vehicleInfo,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
            #phone: phone,
            #vehicleInfo: vehicleInfo,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> getCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> updateProfile({
    String? name,
    String? phone,
    _i5.VehicleInfo? vehicleInfo,
    _i5.UserPreferences? preferences,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #name: name,
            #phone: phone,
            #vehicleInfo: vehicleInfo,
            #preferences: preferences,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isLoggedIn() => (super.noSuchMethod(
        Invocation.method(
          #isLoggedIn,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i5.User?> getStoredUser() => (super.noSuchMethod(
        Invocation.method(
          #getStoredUser,
          [],
        ),
        returnValue: _i3.Future<_i5.User?>.value(),
      ) as _i3.Future<_i5.User?>);

  @override
  _i3.Future<Map<String, dynamic>> requestPasswordReset(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPasswordReset,
          [],
          {#email: email},
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);

  @override
  _i3.Future<Map<String, dynamic>> resetPassword({
    required String? token,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #token: token,
            #newPassword: newPassword,
          },
        ),
        returnValue:
            _i3.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i3.Future<Map<String, dynamic>>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i6.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasPermission => (super.noSuchMethod(
        Invocation.getter(#hasPermission),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i7.Position?> getCurrentPosition() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentPosition,
          [],
        ),
        returnValue: _i3.Future<_i7.Position?>.value(),
      ) as _i3.Future<_i7.Position?>);

  @override
  _i3.Future<void> getAddressFromLatLng(_i7.Position? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAddressFromLatLng,
          [position],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i8.LatLng?> getCoordinatesFromAddress(String? address) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoordinatesFromAddress,
          [address],
        ),
        returnValue: _i3.Future<_i8.LatLng?>.value(),
      ) as _i3.Future<_i8.LatLng?>);

  @override
  double calculateDistance(
    _i8.LatLng? point1,
    _i8.LatLng? point2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistance,
          [
            point1,
            point2,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  void startLocationTracking() => super.noSuchMethod(
        Invocation.method(
          #startLocationTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLocationTracking() => super.noSuchMethod(
        Invocation.method(
          #stopLocationTracking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getFormattedAddress() => (super.noSuchMethod(
        Invocation.method(
          #getFormattedAddress,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getFormattedAddress,
            [],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i11.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setAuthToken(String? token) => (super.noSuchMethod(
        Invocation.method(
          #setAuthToken,
          [token],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> getAuthToken() => (super.noSuchMethod(
        Invocation.method(
          #getAuthToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> clearAuthToken() => (super.noSuchMethod(
        Invocation.method(
          #clearAuthToken,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #setUser,
          [user],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i5.User?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i3.Future<_i5.User?>.value(),
      ) as _i3.Future<_i5.User?>);

  @override
  _i3.Future<void> clearUser() => (super.noSuchMethod(
        Invocation.method(
          #clearUser,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setThemeMode(String? theme) => (super.noSuchMethod(
        Invocation.method(
          #setThemeMode,
          [theme],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  String getThemeMode() => (super.noSuchMethod(
        Invocation.method(
          #getThemeMode,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getThemeMode,
            [],
          ),
        ),
      ) as String);

  @override
  _i3.Future<void> addRecentSearch(String? query) => (super.noSuchMethod(
        Invocation.method(
          #addRecentSearch,
          [query],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<String> getRecentSearches() => (super.noSuchMethod(
        Invocation.method(
          #getRecentSearches,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i3.Future<void> clearRecentSearches() => (super.noSuchMethod(
        Invocation.method(
          #clearRecentSearches,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> addFavoriteLocation(_i12.ParkingLot? parkingLot) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFavoriteLocation,
          [parkingLot],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFavoriteLocation(String? parkingLotId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFavoriteLocation,
          [parkingLotId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i12.ParkingLot> getFavoriteLocations() => (super.noSuchMethod(
        Invocation.method(
          #getFavoriteLocations,
          [],
        ),
        returnValue: <_i12.ParkingLot>[],
      ) as List<_i12.ParkingLot>);

  @override
  bool isFavoriteLocation(String? parkingLotId) => (super.noSuchMethod(
        Invocation.method(
          #isFavoriteLocation,
          [parkingLotId],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> cacheRecentBookings(List<_i13.Booking>? bookings) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheRecentBookings,
          [bookings],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i13.Booking> getCachedRecentBookings() => (super.noSuchMethod(
        Invocation.method(
          #getCachedRecentBookings,
          [],
        ),
        returnValue: <_i13.Booking>[],
      ) as List<_i13.Booking>);

  @override
  _i3.Future<void> saveRecentBookings(List<_i13.Booking>? bookings) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRecentBookings,
          [bookings],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i13.Booking>> getRecentBookings() => (super.noSuchMethod(
        Invocation.method(
          #getRecentBookings,
          [],
        ),
        returnValue: _i3.Future<List<_i13.Booking>>.value(<_i13.Booking>[]),
      ) as _i3.Future<List<_i13.Booking>>);

  @override
  _i3.Future<bool?> getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<void> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i14.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void navigateTo(
    _i15.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushTo(
    _i15.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceTo(
    _i15.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBack(_i15.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [context],
        ),
        returnValueForMissingStub: null,
      );
}
