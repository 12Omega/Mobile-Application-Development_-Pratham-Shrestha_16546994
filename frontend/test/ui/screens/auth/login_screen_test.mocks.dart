// Mocks generated by Mockito 5.4.5 from annotations
// in parkease/test/ui/screens/auth/login_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:parkease/core/models/user_model.dart' as _i5;
import 'package:parkease/core/services/navigation_service.dart' as _i7;
import 'package:parkease/core/viewmodels/auth_viewmodel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthViewModel extends _i1.Mock implements _i2.AuthViewModel {
  MockAuthViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get isAdmin => (super.noSuchMethod(
        Invocation.getter(#isAdmin),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<bool> register({
    required String? name,
    required String? email,
    required String? password,
    required String? phone,
    required String? licensePlate,
    required String? vehicleType,
    String? color,
    String? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
            #phone: phone,
            #licensePlate: licensePlate,
            #vehicleType: vehicleType,
            #color: color,
            #model: model,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> logout(_i4.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [context],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> updateProfile({
    String? name,
    String? phone,
    _i5.VehicleInfo? vehicleInfo,
    _i5.UserPreferences? preferences,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #name: name,
            #phone: phone,
            #vehicleInfo: vehicleInfo,
            #preferences: preferences,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> refreshUserData() => (super.noSuchMethod(
        Invocation.method(
          #refreshUserData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> requestPasswordReset({required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPasswordReset,
          [],
          {#email: email},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> resetPassword({
    required String? token,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #token: token,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i7.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void navigateTo(
    _i4.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pushTo(
    _i4.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #pushTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceTo(
    _i4.BuildContext? context,
    String? routeName, {
    Map<String, String>? params,
    Map<String, String>? queryParams,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceTo,
          [
            context,
            routeName,
          ],
          {
            #params: params,
            #queryParams: queryParams,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void goBack(_i4.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [context],
        ),
        returnValueForMissingStub: null,
      );
}
