// Mocks generated by Mockito 5.4.5 from annotations
// in parkease/test/ui/screens/booking/booking_history_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parkease/core/models/booking_model.dart' as _i3;
import 'package:parkease/core/models/user_model.dart' as _i5;
import 'package:parkease/core/viewmodels/booking_viewmodel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BookingViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingViewModel extends _i1.Mock implements _i2.BookingViewModel {
  MockBookingViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Booking> get userBookings => (super.noSuchMethod(
        Invocation.getter(#userBookings),
        returnValue: <_i3.Booking>[],
      ) as List<_i3.Booking>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  int get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: 0,
      ) as int);

  @override
  int get totalPages => (super.noSuchMethod(
        Invocation.getter(#totalPages),
        returnValue: 0,
      ) as int);

  @override
  bool get hasMoreBookings => (super.noSuchMethod(
        Invocation.getter(#hasMoreBookings),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> getUserBookings({bool? refresh = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserBookings,
          [],
          {#refresh: refresh},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadMoreBookings() => (super.noSuchMethod(
        Invocation.method(
          #loadMoreBookings,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> getBookingDetails(String? bookingId) => (super.noSuchMethod(
        Invocation.method(
          #getBookingDetails,
          [bookingId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> createBooking({
    required String? parkingLotId,
    required String? spotNumber,
    required DateTime? startTime,
    required DateTime? endTime,
    required _i5.VehicleInfo? vehicleInfo,
    required String? paymentMethod,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBooking,
          [],
          {
            #parkingLotId: parkingLotId,
            #spotNumber: spotNumber,
            #startTime: startTime,
            #endTime: endTime,
            #vehicleInfo: vehicleInfo,
            #paymentMethod: paymentMethod,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> cancelBooking(
    String? bookingId, {
    String? reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelBooking,
          [bookingId],
          {#reason: reason},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> checkInBooking(String? bookingId) => (super.noSuchMethod(
        Invocation.method(
          #checkInBooking,
          [bookingId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> checkOutBooking(String? bookingId) => (super.noSuchMethod(
        Invocation.method(
          #checkOutBooking,
          [bookingId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> submitFeedback(
    String? bookingId,
    int? rating, {
    String? comment,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitFeedback,
          [
            bookingId,
            rating,
          ],
          {#comment: comment},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> filterBookingsByStatus(String? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterBookingsByStatus,
          [status],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  List<_i3.Booking> getActiveBookings() => (super.noSuchMethod(
        Invocation.method(
          #getActiveBookings,
          [],
        ),
        returnValue: <_i3.Booking>[],
      ) as List<_i3.Booking>);

  @override
  List<_i3.Booking> getUpcomingBookings() => (super.noSuchMethod(
        Invocation.method(
          #getUpcomingBookings,
          [],
        ),
        returnValue: <_i3.Booking>[],
      ) as List<_i3.Booking>);

  @override
  List<_i3.Booking> getCompletedBookings() => (super.noSuchMethod(
        Invocation.method(
          #getCompletedBookings,
          [],
        ),
        returnValue: <_i3.Booking>[],
      ) as List<_i3.Booking>);

  @override
  void clearSelectedBooking() => super.noSuchMethod(
        Invocation.method(
          #clearSelectedBooking,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
