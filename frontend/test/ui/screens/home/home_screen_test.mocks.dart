// Mocks generated by Mockito 5.4.5 from annotations
// in parkease/test/ui/screens/home/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parkease/core/models/booking_model.dart' as _i4;
import 'package:parkease/core/models/parking_model.dart' as _i3;
import 'package:parkease/core/viewmodels/home_viewmodel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i2.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.ParkingLot> get nearbyParkingLots => (super.noSuchMethod(
        Invocation.getter(#nearbyParkingLots),
        returnValue: <_i3.ParkingLot>[],
      ) as List<_i3.ParkingLot>);

  @override
  List<_i4.Booking> get activeBookings => (super.noSuchMethod(
        Invocation.getter(#activeBookings),
        returnValue: <_i4.Booking>[],
      ) as List<_i4.Booking>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> refreshData() => (super.noSuchMethod(
        Invocation.method(
          #refreshData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> searchParkingLots(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchParkingLots,
          [query],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void filterParkingLotsByAmenities(List<String>? amenities) =>
      super.noSuchMethod(
        Invocation.method(
          #filterParkingLotsByAmenities,
          [amenities],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sortParkingLotsByDistance() => super.noSuchMethod(
        Invocation.method(
          #sortParkingLotsByDistance,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sortParkingLotsByPrice() => super.noSuchMethod(
        Invocation.method(
          #sortParkingLotsByPrice,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sortParkingLotsByAvailability() => super.noSuchMethod(
        Invocation.method(
          #sortParkingLotsByAvailability,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
